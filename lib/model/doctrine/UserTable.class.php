<?php

/**
 * UserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('User');
    }
    public function func_checkUsernameAndEmail($email_address,$username)
    {
                          $q = $this->createQuery('u')
                            ->where('u.email_address = ?  ', "$email_address")
                            ->orWhere('u.username = ?', "$username")
                            ->fetchArray();
							return $q; 
    }
  public function func_getSaltForLogin($email_address_or_username)
  {
   $q = $this->createQuery('u')
                        ->where('u.email_address = ?  ', "$email_address_or_username")
                        ->orWhere('u.username = ?', "$email_address_or_username")
                        ->andWhere('u.is_active = ?', 1)
                        ->fetchArray();
   return $q;
  }
  public function func_lastLogin($user_id)
  {
                                Doctrine_Query::create()
                                ->update('User u')
                                ->set('u.last_login', '?', date("Y-m-d H:i:s"))
                                ->where('u.user_id = ?', $user_id)
                                ->execute();
  }
  public function func_login($email_address_or_username,$password)
  {
  	$q = $this->createQuery('u')
  	//->where('u.email_address = ?  ', $email_address_or_username)
  	->where('u.username = ?', $email_address_or_username)
  	->andWhere('u.pass = ?', $password)
  	->andWhere('u.is_active = ?', 1)
  	->fetchArray();
  	return $q;
  }
  public function func_confirmSaltToVerifyEmail($email_address,$salt)
  {
  	$q = $this->createQuery('u')
  	->where('u.email_address = ?  ', "$email_address")
  	->andWhere('u.salt = ?', "$salt")
  	->fetchArray();
  	return $q;
  }

  public function func_activate($email_address)
  {
  	Doctrine_Query::create()
  	->update('User u')
  	->set('u.is_active', '?', 1)
  	->where('u.email_address = ?', "$email_address")
  	->execute();
  }
  public function func_generateRandomValue()
  {
                      $characters = '0123456789abcdefghijklmnopqrstuvwxyz';
                    $randomValue = '';
                    for ($p = 0; $p < 6; $p++) {
                        $randomValue.= $characters[mt_rand(0, strlen($characters))];
                    }
                    return $randomValue;
  }
  public function func_updateForgotPassword($email_address,$password,$getSalt)
  {
                    Doctrine_Query::create()
                            ->update('User u')
                            ->set('u.pass', '?', $password)
                             ->set('u.salt', '?', $getSalt)
                            ->where('u.email_address = ?', "$email_address")
                            ->execute();
  }
  public function func_getValuesFromEmailAddress($email_address)
  {
  	$q = $this->createQuery('u')
  	->where('u.email_address = ?  ', "$email_address")
  	->fetchArray();
  	return $q;
  }
   public function func_getValuesFromUserId($user_id)
  {
  	$q = $this->createQuery('u')
  	->where('u.user_id = ?  ', $user_id)
  	->fetchArray();
  	return $q;
  }
  
  public function func_sendVerificationEmail($first_name,$email_address,$salt)
  {
  	$generate_url = $_SERVER["SERVER_NAME"]."/user/confirm?email_address=$email_address&verify_code=$salt";
  	$body = "Dear $first_name<br><br>
    		                 Thanks for applying for an account on Ruckus. <br><br>
                             To prevent abuse of the site, we require that you activate your
                             account by clicking on the following link.<br><br>";
  	$body .= "<a href=\"$generate_url\">$generate_url</a>";
  	$subject = 'Please verify your account on Ruckus';
  	$to = $email_address;
  	$mail = $this->sendemail($to, $subject, $body);
  }
  public function func_sendForgotPasswordEmail($first_name,$email_address,$password)
  {
                    $to = $email_address;
                    $msg = 'Dear ' . ucfirst($first_name) . '<br><br>
		                  Your Password has been reset to new password : ' . $password . ' <br><br>Please Click The Below Link to login <a href="' . $_SERVER["SERVER_NAME"] . '/login">' . $_SERVER["SERVER_NAME"] . '/login</a>';
                    $subject = 'Ruckus Forgot Password';
                    $this->sendemail($to, $subject, $msg);
  }
  /*     * *********    Send Mailer  Function ************** */
  
  public function sendemail($to, $subject, $message) {
  	$mail = new PHPGMailer();
  	$mail->Username = 'mail.ruckus@gmail.com';
  	$mail->Password = 'Hamesha1$';
  	$mail->From = 'mail.ruckus@gmail.com';
  	$mail->FromName = 'Ruckus Media Group';
  	$mail->Subject = $subject;
  	$mail->AddAddress($to);
  	$mail->IsHTML(true);
  	$mail->Body = $message;
  	$mail->Send();
  }
  
  /*     * *********    Send Mailer  Function ************** */
  
  /*     * *********    GeneratePassword  Function ************** */
  
  public function func_generatePassword($salt, $password) {
  	$password = sha1($salt . $password);
  	return $password;
  }
  
  /*     * *********    GeneratePassword  Function ************** */
  
  /*     * *********    GenerateSalt  Function ************** */
  
  public function func_generateSalt() {
  	$salt = sha1(substr(uniqid(rand(), true), 0, 9));
  	return $salt;
  }
  
  /*     * *********    GenerateSalt  Function ************** */

  public function func_checkAccessToken($accessToken, $user_id){
	 $q = $this->createQuery('u')
         ->where('u.user_id = ?',$user_id)
         ->andWhere('u.access_token = ?',$accessToken);
      return $authenticated = $q->fetchOne(); 
  }

  public function func_checkUserId($user_id){
	 $q = $this->createQuery('u')
         ->where('u.user_id = ?',$user_id);
      return $authenticated = $q->fetchOne(); 
  }
  
  /*************  GetUserEmails *********/
  
   public function func_getUserEmails()
  {
  	$q =Doctrine_Query::create()
	   ->select('u.email_address') 
       ->from('user u') 
	   ->where('is_active = ?  ', "1")
  	   ->fetchArray();
  	return $q;
  }
  
  /*************  GetUserEmails *********/
  
  
}