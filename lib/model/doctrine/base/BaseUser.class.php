<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'doctrine');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $first_name
 * @property string $last_name
 * @property string $email_address
 * @property string $additional_emails
 * @property string $username
 * @property string $salt
 * @property string $pass
 * @property integer $is_active
 * @property integer $is_super_admin
 * @property timestamp $last_login
 * @property string $access_token
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Doctrine_Collection $Students
 * 
 * @method integer             getUserId()            Returns the current record's "user_id" value
 * @method string              getFirstName()         Returns the current record's "first_name" value
 * @method string              getLastName()          Returns the current record's "last_name" value
 * @method string              getEmailAddress()      Returns the current record's "email_address" value
 * @method string              getAdditionalEmails()  Returns the current record's "additional_emails" value
 * @method string              getUsername()          Returns the current record's "username" value
 * @method string              getSalt()              Returns the current record's "salt" value
 * @method string              getPass()              Returns the current record's "pass" value
 * @method integer             getIsActive()          Returns the current record's "is_active" value
 * @method integer             getIsSuperAdmin()      Returns the current record's "is_super_admin" value
 * @method timestamp           getLastLogin()         Returns the current record's "last_login" value
 * @method string              getAccessToken()       Returns the current record's "access_token" value
 * @method timestamp           getCreatedAt()         Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()         Returns the current record's "updated_at" value
 * @method Doctrine_Collection getStudents()          Returns the current record's "Students" collection
 * @method User                setUserId()            Sets the current record's "user_id" value
 * @method User                setFirstName()         Sets the current record's "first_name" value
 * @method User                setLastName()          Sets the current record's "last_name" value
 * @method User                setEmailAddress()      Sets the current record's "email_address" value
 * @method User                setAdditionalEmails()  Sets the current record's "additional_emails" value
 * @method User                setUsername()          Sets the current record's "username" value
 * @method User                setSalt()              Sets the current record's "salt" value
 * @method User                setPass()              Sets the current record's "pass" value
 * @method User                setIsActive()          Sets the current record's "is_active" value
 * @method User                setIsSuperAdmin()      Sets the current record's "is_super_admin" value
 * @method User                setLastLogin()         Sets the current record's "last_login" value
 * @method User                setAccessToken()       Sets the current record's "access_token" value
 * @method User                setCreatedAt()         Sets the current record's "created_at" value
 * @method User                setUpdatedAt()         Sets the current record's "updated_at" value
 * @method User                setStudents()          Sets the current record's "Students" collection
 * 
 * @package    ruckus_dev
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('email_address', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('additional_emails', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('pass', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('is_super_admin', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('last_login', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('access_token', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Students', array(
             'local' => 'user_id',
             'foreign' => 'user_id'));
    }
}