<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Book', 'doctrine');

/**
 * BaseBook
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $book_id
 * @property integer $level_id
 * @property integer $category_id
 * @property integer $series_id
 * @property string $name
 * @property string $bk_image
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property BookCategory $BookCategory
 * @property BookLevels $BookLevels
 * @property BookSeries $BookSeries
 * @property Doctrine_Collection $Activities
 * @property Doctrine_Collection $BookDetails
 * @property Doctrine_Collection $MetricResultBoolean
 * @property Doctrine_Collection $MetricResultFloat
 * @property Doctrine_Collection $MetricResultInteger
 * @property Doctrine_Collection $MetricResultVarchar
 * @property Doctrine_Collection $TagTaxonomy
 * 
 * @method integer             getBookId()              Returns the current record's "book_id" value
 * @method integer             getLevelId()             Returns the current record's "level_id" value
 * @method integer             getCategoryId()          Returns the current record's "category_id" value
 * @method integer             getSeriesId()            Returns the current record's "series_id" value
 * @method string              getName()                Returns the current record's "name" value
 * @method string              getBkImage()             Returns the current record's "bk_image" value
 * @method timestamp           getCreatedAt()           Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()           Returns the current record's "updated_at" value
 * @method BookCategory        getBookCategory()        Returns the current record's "BookCategory" value
 * @method BookLevels          getBookLevels()          Returns the current record's "BookLevels" value
 * @method BookSeries          getBookSeries()          Returns the current record's "BookSeries" value
 * @method Doctrine_Collection getActivities()          Returns the current record's "Activities" collection
 * @method Doctrine_Collection getBookDetails()         Returns the current record's "BookDetails" collection
 * @method Doctrine_Collection getMetricResultBoolean() Returns the current record's "MetricResultBoolean" collection
 * @method Doctrine_Collection getMetricResultFloat()   Returns the current record's "MetricResultFloat" collection
 * @method Doctrine_Collection getMetricResultInteger() Returns the current record's "MetricResultInteger" collection
 * @method Doctrine_Collection getMetricResultVarchar() Returns the current record's "MetricResultVarchar" collection
 * @method Doctrine_Collection getTagTaxonomy()         Returns the current record's "TagTaxonomy" collection
 * @method Book                setBookId()              Sets the current record's "book_id" value
 * @method Book                setLevelId()             Sets the current record's "level_id" value
 * @method Book                setCategoryId()          Sets the current record's "category_id" value
 * @method Book                setSeriesId()            Sets the current record's "series_id" value
 * @method Book                setName()                Sets the current record's "name" value
 * @method Book                setBkImage()             Sets the current record's "bk_image" value
 * @method Book                setCreatedAt()           Sets the current record's "created_at" value
 * @method Book                setUpdatedAt()           Sets the current record's "updated_at" value
 * @method Book                setBookCategory()        Sets the current record's "BookCategory" value
 * @method Book                setBookLevels()          Sets the current record's "BookLevels" value
 * @method Book                setBookSeries()          Sets the current record's "BookSeries" value
 * @method Book                setActivities()          Sets the current record's "Activities" collection
 * @method Book                setBookDetails()         Sets the current record's "BookDetails" collection
 * @method Book                setMetricResultBoolean() Sets the current record's "MetricResultBoolean" collection
 * @method Book                setMetricResultFloat()   Sets the current record's "MetricResultFloat" collection
 * @method Book                setMetricResultInteger() Sets the current record's "MetricResultInteger" collection
 * @method Book                setMetricResultVarchar() Sets the current record's "MetricResultVarchar" collection
 * @method Book                setTagTaxonomy()         Sets the current record's "TagTaxonomy" collection
 * 
 * @package    ruckus_dev
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBook extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('book');
        $this->hasColumn('book_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('level_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('category_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('series_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('bk_image', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BookCategory', array(
             'local' => 'category_id',
             'foreign' => 'category_id'));

        $this->hasOne('BookLevels', array(
             'local' => 'level_id',
             'foreign' => 'level_id'));

        $this->hasOne('BookSeries', array(
             'local' => 'series_id',
             'foreign' => 'series_id'));

        $this->hasMany('Activities', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('BookDetails', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('MetricResultBoolean', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('MetricResultFloat', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('MetricResultInteger', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('MetricResultVarchar', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));

        $this->hasMany('TagTaxonomy', array(
             'local' => 'book_id',
             'foreign' => 'book_id'));
    }
}