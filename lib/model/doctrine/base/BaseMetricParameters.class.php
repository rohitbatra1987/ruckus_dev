<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MetricParameters', 'doctrine');

/**
 * BaseMetricParameters
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $metric_id
 * @property string $name
 * @property string $mtr_description
 * @property string $mtr_data_type
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Doctrine_Collection $MetricResultBoolean
 * @property Doctrine_Collection $MetricResultFloat
 * @property Doctrine_Collection $MetricResultInteger
 * @property Doctrine_Collection $MetricResultVarchar
 * 
 * @method integer             getMetricId()            Returns the current record's "metric_id" value
 * @method string              getName()                Returns the current record's "name" value
 * @method string              getMtrDescription()      Returns the current record's "mtr_description" value
 * @method string              getMtrDataType()         Returns the current record's "mtr_data_type" value
 * @method timestamp           getCreatedAt()           Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()           Returns the current record's "updated_at" value
 * @method Doctrine_Collection getMetricResultBoolean() Returns the current record's "MetricResultBoolean" collection
 * @method Doctrine_Collection getMetricResultFloat()   Returns the current record's "MetricResultFloat" collection
 * @method Doctrine_Collection getMetricResultInteger() Returns the current record's "MetricResultInteger" collection
 * @method Doctrine_Collection getMetricResultVarchar() Returns the current record's "MetricResultVarchar" collection
 * @method MetricParameters    setMetricId()            Sets the current record's "metric_id" value
 * @method MetricParameters    setName()                Sets the current record's "name" value
 * @method MetricParameters    setMtrDescription()      Sets the current record's "mtr_description" value
 * @method MetricParameters    setMtrDataType()         Sets the current record's "mtr_data_type" value
 * @method MetricParameters    setCreatedAt()           Sets the current record's "created_at" value
 * @method MetricParameters    setUpdatedAt()           Sets the current record's "updated_at" value
 * @method MetricParameters    setMetricResultBoolean() Sets the current record's "MetricResultBoolean" collection
 * @method MetricParameters    setMetricResultFloat()   Sets the current record's "MetricResultFloat" collection
 * @method MetricParameters    setMetricResultInteger() Sets the current record's "MetricResultInteger" collection
 * @method MetricParameters    setMetricResultVarchar() Sets the current record's "MetricResultVarchar" collection
 * 
 * @package    ruckus_dev
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMetricParameters extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('metric_parameters');
        $this->hasColumn('metric_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('mtr_description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('mtr_data_type', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('MetricResultBoolean', array(
             'local' => 'metric_id',
             'foreign' => 'metric_id'));

        $this->hasMany('MetricResultFloat', array(
             'local' => 'metric_id',
             'foreign' => 'metric_id'));

        $this->hasMany('MetricResultInteger', array(
             'local' => 'metric_id',
             'foreign' => 'metric_id'));

        $this->hasMany('MetricResultVarchar', array(
             'local' => 'metric_id',
             'foreign' => 'metric_id'));
    }
}